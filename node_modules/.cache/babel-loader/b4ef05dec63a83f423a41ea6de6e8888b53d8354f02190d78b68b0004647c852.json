{"ast":null,"code":"var _jsxFileName = \"/Users/parvesalam/Documents/Msc/semester 3/web engineereing/Front-end/src/context/AuthProvider.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { createContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const response = await axios.get('http://localhost:5000/user', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (response.status === 200) {\n            setUserData(response.data);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: userData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Q/bN2hINckB+VINYSZfns3MkAk8=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["axios","React","createContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","userData","setUserData","fetchUserData","token","localStorage","getItem","response","get","headers","Authorization","status","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parvesalam/Documents/Msc/semester 3/web engineereing/Front-end/src/context/AuthProvider.js"],"sourcesContent":["import axios from 'axios';\nimport React, { createContext, useEffect, useState } from 'react';\nexport const AuthContext  = createContext();\n\nconst AuthProvider = ({children}) => {\n\n    const [userData, setUserData] = useState(null);\n\n    useEffect(() => {\n      const fetchUserData = async () => {\n        try {\n          const token = localStorage.getItem('token');\n          if (token) {\n            const response = await axios.get('http://localhost:5000/user', {\n              headers: {\n                Authorization: `Bearer ${token}`,\n              },\n            });\n  \n            if (response.status === 200) {\n              setUserData(response.data);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n        }\n      };\n  \n      fetchUserData();\n    }, []);\n    return (\n        <AuthContext.Provider value={userData}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthProvider;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClE,OAAO,MAAMC,WAAW,gBAAIL,aAAa,CAAC,CAAC;AAE3C,MAAMM,YAAY,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAEjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,4BAA4B,EAAE;YAC7DC,OAAO,EAAE;cACPC,aAAa,EAAG,UAASN,KAAM;YACjC;UACF,CAAC,CAAC;UAEF,IAAIG,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;YAC3BT,WAAW,CAACK,QAAQ,CAACK,IAAI,CAAC;UAC5B;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDV,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EACN,oBACIP,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAEf,QAAS;IAAAF,QAAA,EACjCA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACpB,EAAA,CA/BIF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAiClB,eAAeA,YAAY;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}